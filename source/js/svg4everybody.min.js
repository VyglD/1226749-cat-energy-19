!function(e,t){"function"==typeof define&&define.amd?define([],(function(){return e.svg4everybody=t()})):"object"==typeof module&&module.exports?module.exports=t():e.svg4everybody=t()}(this,(function(){
/*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */
function e(e,t,n,a){if(n){var i=document.createDocumentFragment(),o=!t.hasAttribute("viewBox")&&n.getAttribute("viewBox");o&&t.setAttribute("viewBox",o);for(var r=document.importNode?document.importNode(n,!0):n.cloneNode(!0),d=document.createElementNS(t.namespaceURI||"http://www.w3.org/2000/svg","g");r.childNodes.length;)d.appendChild(r.firstChild);if(a)for(var u=0;a.attributes.length>u;u++){var m=a.attributes[u];"xlink:href"!==m.name&&"href"!==m.name&&d.setAttribute(m.name,m.value)}i.appendChild(d),e.appendChild(i)}}function t(t,n){t.onreadystatechange=function(){if(4===t.readyState){var a=t._cachedDocument;a||((a=t._cachedDocument=document.implementation.createHTMLDocument("")).body.innerHTML=t.responseText,a.domain!==document.domain&&(a.domain=document.domain),t._cachedTarget={}),t._embeds.splice(0).map((function(i){var o=t._cachedTarget[i.id];o||(o=t._cachedTarget[i.id]=a.getElementById(i.id)),e(i.parent,i.svg,o,n)}))}},t.onreadystatechange()}function n(e){for(var t=e;"svg"!==t.nodeName.toLowerCase()&&(t=t.parentNode););return t}return function(a){var i,o=Object(a),r=window.top!==window.self;i="polyfill"in o?o.polyfill:/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||/\bEdge\/.(\d+)\b/.test(navigator.userAgent)&&r;var d={},u=window.requestAnimationFrame||setTimeout,m=document.getElementsByTagName("use"),c=0;i&&function a(){if(c&&m.length-c<=0)u(a,67);else{c=0;for(var r=0;r<m.length;){var s=m[r],l=s.parentNode,f=n(l),g=s.getAttribute("xlink:href")||s.getAttribute("href");if(!g&&o.attributeName&&(g=s.getAttribute(o.attributeName)),f&&g){if(i)if(!o.validate||o.validate(g,f,s)){l.removeChild(s);var v=g.split("#"),p=v.shift(),b=v.join("#");if(p.length){var h=d[p];h||((h=d[p]=new XMLHttpRequest).open("GET",p),h.send(),h._embeds=[]),h._embeds.push({parent:l,svg:f,id:b}),t(h,s)}else e(l,f,document.getElementById(b),s)}else++r,++c}else++r}u(a,67)}}()}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
